{"is_source_file": true, "format": "C#", "description": "Defines an interface INoteRepository for CRUD operations on Note entities within the infrastructure layer of a notes backend application.", "external_files": ["NotesBackend.Domain.Entities"], "external_methods": ["Task<IReadOnlyList<Note>> GetAllAsync(CancellationToken)", "Task<Note?> GetByIdAsync(Guid, CancellationToken)", "Task<Note> AddAsync(Note, CancellationToken)", "Task<Note> UpdateAsync(Note, CancellationToken)", "Task<bool> DeleteAsync(Guid, CancellationToken)", "Task<bool> ExistsAsync(Guid, CancellationToken)"], "published": ["INoteRepository"], "classes": [{"name": "INoteRepository", "description": "Repository abstraction interface for CRUD operations on Note entities within the infrastructure layer."}], "methods": [{"name": "GetAllAsync", "description": "Retrieve all notes asynchronously."}, {"name": "GetByIdAsync", "description": "Retrieve a note by its unique identifier asynchronously."}, {"name": "AddAsync", "description": "Add a new note asynchronously."}, {"name": "UpdateAsync", "description": "Update an existing note asynchronously."}, {"name": "DeleteAsync", "description": "Delete a note by its unique identifier asynchronously."}, {"name": "ExistsAsync", "description": "Check if a note exists by its unique identifier asynchronously."}], "calls": ["GetAllAsync", "GetByIdAsync", "AddAsync", "UpdateAsync", "DeleteAsync", "ExistsAsync"], "search-terms": ["INoteRepository", "Note repository", "note CRUD", "NotesBackend.Infrastructure.Repositories", "NotesBackend.Domain.Entities"], "state": 2, "file_id": 9, "knowledge_revision": 19, "git_revision": "", "hash": "25caa2cc73cd39f83ab4426032f3aa14", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/Infrastructure/Repositories/INoteRepository.cs", "revision_history": [{"19": ""}]}